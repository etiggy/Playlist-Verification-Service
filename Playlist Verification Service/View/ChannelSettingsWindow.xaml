<Window Background="#FF252525" Height="480" Width="640" WindowStyle="None" ResizeMode="NoResize"
        Title="Channel Settings" FontSize="14" FontFamily="Segoe UI" Icon="/Resources/app_icon.ico" MouseLeftButtonDown="Window_MouseDown"
        x:Class="Playlist_Verification_Service.ChannelSettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Playlist_Verification_Service"
        mc:Ignorable="d" AllowsTransparency="False">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.ColumnSpan="3" Height="30">
            <Grid.Background>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                    <GradientStop Color="#FF474747" Offset="0"/>
                    <GradientStop Color="#FF252525" Offset="1"/>
                </LinearGradientBrush>
            </Grid.Background>
            <Image Source="/Resources/app_icon.png" Margin="10,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Height="16" Stretch="Uniform"/>
            <TextBlock Text="PVS - CHANNEL SETTINGS" Foreground="White" FontWeight="SemiBold" Margin="35,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"/>

            <Border BorderThickness="0" Margin="0,0,80,0" Height="30" Width="40" HorizontalAlignment="Right" 
                VerticalAlignment="Center" PreviewMouseLeftButtonDown="MinimiseWindow">
                <Grid>
                    <Image Source="/Resources/minimise.png" Height="16" Stretch="Uniform"/>
                </Grid>
                <Border.Style>
                    <Style>
                        <Setter Property="Border.Background" Value="Transparent"/>
                        <Style.Triggers>
                            <Trigger Property="Border.IsMouseOver" Value="True">
                                <Setter Property="Border.Background" Value="#FF474747" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>

            <Border BorderThickness="0" Margin="0,0,40,0" Height="30" Width="40" HorizontalAlignment="Right" 
                VerticalAlignment="Bottom" PreviewMouseLeftButtonDown="MaximiseWindow">
                <Grid>
                    <Image Source="/Resources/maximise.png" Height="16" Stretch="Uniform"/>
                </Grid>
                <Border.Style>
                    <Style>
                        <Setter Property="Border.Background" Value="Transparent"/>
                        <Style.Triggers>
                            <Trigger Property="Border.IsMouseOver" Value="True">
                                <Setter Property="Border.Background" Value="#FF474747" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>

            <Border BorderThickness="0" Margin="0" Height="30" Width="40" HorizontalAlignment="Right" 
                VerticalAlignment="Bottom" PreviewMouseLeftButtonDown="CloseWindow">
                <Grid>
                    <Image Source="/Resources/close.png" Height="16" Stretch="Uniform"/>
                </Grid>
                <Border.Style>
                    <Style>
                        <Setter Property="Border.Background" Value="Transparent"/>
                        <Style.Triggers>
                            <Trigger Property="Border.IsMouseOver" Value="True">
                                <Setter Property="Border.Background" Value="#FF474747" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
        </Grid>

        <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="130"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" BorderBrush="#FF1585B5" BorderThickness="1" Margin="10,2,5,5">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Label Content="LIST OF SETTINGS" FontSize="11" FontWeight="DemiBold" Background="#FF1585B5" Foreground="White" Grid.Row="0"/>
                    <ListBox x:Name="SettingsListbox" Grid.Row="1" ItemsSource="{Binding}" SelectionMode="Single" Margin="5,4,2,4" 
                 Background="Transparent" Foreground="White" BorderThickness="0" HorizontalContentAlignment="Stretch"
                 ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.IsDeferredScrollingEnabled="False" 
                 VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.CacheLength="2,3" 
                 VirtualizingStackPanel.CacheLengthUnit="Page" VirtualizingStackPanel.ScrollUnit="Pixel" 
                 VirtualizingStackPanel.IsContainerVirtualizable="True" VirtualizingStackPanel.VirtualizationMode="Recycling" 
                 ItemContainerStyle="{DynamicResource ListBoxItemStyle}">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Border Name="Border" BorderBrush="#FFC3C3C3" Background="Transparent" BorderThickness="0,1" Margin="0,1,1,1" Padding="2">
                                    <TextBlock FontWeight="DemiBold" Text="{Binding ChannelID}"/>
                                </Border>
                                <DataTemplate.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, 
                                    AncestorType={x:Type ListBoxItem}}, Path=IsMouseOver}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Border" Property="Background" Value="#FF474747"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, 
                                    AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True"/>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, 
                                    AncestorType={x:Type ListBox}}, Path=IsSelectionActive}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Border" Property="Background" Value="#FF5D5D5D"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, 
                                    AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True"/>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, 
                                    AncestorType={x:Type ListBox}}, Path=IsSelectionActive}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Border" Property="Background" Value="#FF474747"/>
                                    </MultiDataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </Grid>
            </Border>
            <Border Grid.Column="1" BorderBrush="#FF1585B5" BorderThickness="1" Margin="5,2,10,5">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Label Content="CONFIGURABLE PARAMETERS" FontSize="11" FontWeight="DemiBold" Background="#FF1585B5" Foreground="White" Grid.Row="0"/>
                    <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Disabled" Margin="3,5">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Margin="5,0,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="CHANNEL ID"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Four letter channel identification code"/>
                            <TextBox Margin="25,5,5,0" Padding="2" HorizontalAlignment="Left" Width="68" Background="Transparent" BorderThickness="1" Foreground="White" Text="{Binding ElementName=SettingsListbox, Path=SelectedItem.ChannelID, Mode=TwoWay}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="FRAMERATE"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Framerate of the channel"/>
                            <TextBox Margin="25,5,5,0" Padding="2" HorizontalAlignment="Left" Width="44" Background="Transparent" BorderThickness="1" Foreground="White" Text="{Binding ElementName=SettingsListbox, Path=SelectedItem.Framerate, Mode=TwoWay}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="FILENAME CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks if the channel ID and date in the playlist's file name matches the values set in the playlist's header. Useful to spot file name convention errors. This check is skipped if the feed uses the 'Default' settings template."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.FilenameCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="MISSING TX ID CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks every event of the playlist if it has a Tx ID set. (Please note: there is a custom adjustment for this check on the 13PL feed: opt signals won't be checked for missing Tx IDs.)"/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.TxIDCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="ZERO DURATION ITEM CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks every non-zero-duration type event in the playlist if it has a valid duration set."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.ZeroDurationCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="MATERIAL DURATION MISMATCH CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks material based event types in the playlist if their material duration matches their event duration. This check skips the following events: commercial, bug, opt in and opt out signals, ecs, zip, dyn. menu  and primary events with 'timing device', 'variable' and 'end of day' in their title."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.MaterialDurationCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="PROGRAMME PART ORDER DISCREPANCY CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks multi-part programmes if the parts are in consecutive order. This check identifies and skips mini programmes in centre breaks of movies and series as long as the mini programme has the 'mini' or 'news' words in its title."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.ProgrammePartOrderCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="FIXED EVENT CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks if all events in the playlist has their behaviour set to 'Follow on' except for the first item, which should be set to 'Fixed'."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.FixedEventCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="GAPS AND OVERRUNS CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks if the playlist has any gaps or overruns between its primary events."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.GapAndOverRunCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="CHANNEL BUG CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks if all programme parts in the playlist has exactly one bug attached. Also checks if the playlist has any extra bugs attached to non-programme items. This check cannot be used in conjunction with the 'Channel and certification bug check'."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.BugCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="CHANNEL AND CERTIFICATION BUG CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks if programme part blocks have two bugs attached to their first programme parts and one bug to any other programme part until the next break. Also checks if the playlist has any extra bugs attached to non-programme items. This check cannot be used in conjunction with the 'Channel bug check'."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.CertBugCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="SECONDARY EVENT TIMING MISMATCH CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks if secondary events with a non-zero-duration type do not start before or end after the primary event they are attached to."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.SecondaryEventCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="COMMERCIAL OVERRUN CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks the summarised duration of commercials in every hour and in the whole day against the values specified below."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.CommercialOverrunCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>
                            <StackPanel IsEnabled="{Binding ElementName=SettingsListbox, Path=SelectedItem.CommercialOverrunCheck}" Orientation="Horizontal" Margin="15,5,5,0" HorizontalAlignment="Left">
                                <TextBlock Width="Auto" Margin="0,2,10,0" Foreground="White" Text="Max commercials / hour:"/>
                                <TextBox Padding="2" Width="64" Background="Transparent" BorderThickness="1" Foreground="White" Text="{Binding ElementName=SettingsListbox, Path=SelectedItem.MaxComsPerHour, Mode=TwoWay}"/>
                            </StackPanel>
                            <StackPanel IsEnabled="{Binding ElementName=SettingsListbox, Path=SelectedItem.CommercialOverrunCheck}" Orientation="Horizontal" Margin="15,5,5,0" HorizontalAlignment="Left">
                                <TextBlock Width="Auto" Margin="0,2,16,0" Foreground="White" Text="Max commercials / day:"/>
                                <TextBox Padding="2" Width="64" Background="Transparent" BorderThickness="1" Foreground="White" Text="{Binding ElementName=SettingsListbox, Path=SelectedItem.MaxComsPerDay, Mode=TwoWay}"/>
                            </StackPanel>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="OPT OUT SIGNAL CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks if opt signals in opt breaks are in the proper order, come in pairs and there are no overlapping opt breaks."/>
                            <ToggleButton Margin="25,5,5,0" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.OptsignalPairscheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>

                            <TextBlock Margin="5,15,5,0" HorizontalAlignment="Left" Width="Auto" Foreground="White" FontWeight="DemiBold" Text="DUPLICATE ITEM CHECK"/>
                            <TextBlock Margin="5,0" HorizontalAlignment="Left" Width="Auto" TextWrapping="Wrap" Foreground="White" FontSize="12" Text="Checks if a promotion or commercial is present more than once in the same break."/>
                            <ToggleButton Margin="25,5,5,5" HorizontalAlignment="Left" Width="Auto" IsChecked="{Binding ElementName=SettingsListbox, Path=SelectedItem.DuplicateEventInBreakCheck, Mode=TwoWay}" Style="{StaticResource AnimatedSwitch}"/>
                        </StackPanel>
                    </ScrollViewer>
                </Grid>
            </Border>
        </Grid>
        <Grid Grid.Row="2" Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="button1" Grid.Column="0" Margin="10,5,10,10" BorderThickness="1"
                Height="Auto" BorderBrush="#FFC3C3C3" PreviewMouseLeftButtonDown="button1_PreviewMouseLeftButtonDown">
                <Grid>
                    <Image Source="/Resources/add32.png" Margin="0,4,40,4" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Height="24"/>
                    <TextBlock Text="ADD" Foreground="White" FontWeight="DemiBold" Margin="40,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid>
                <Border.Style>
                    <Style>
                        <Setter Property="Border.Background" Value="Transparent"/>
                        <Style.Triggers>
                            <Trigger Property="Border.IsMouseOver" Value="True">
                                <Setter Property="Border.Background" Value="#FF474747" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>

            <Border x:Name="button3" Grid.Column="1" Margin="10,5,10,10" BorderThickness="1"
                Height="Auto" BorderBrush="#FFC3C3C3" PreviewMouseLeftButtonDown="button3_PreviewMouseLeftButtonDown" >
                <Grid>
                    <Image Source="/Resources/refresh32.png" Margin="0,4,50,4" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Height="24"/>
                    <TextBlock Text="RESET" Foreground="White" FontWeight="DemiBold" Margin="50,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid>
                <Border.Style>
                    <Style>
                        <Setter Property="Border.Background" Value="Transparent"/>
                        <Style.Triggers>
                            <Trigger Property="Border.IsMouseOver" Value="True">
                                <Setter Property="Border.Background" Value="#FF474747" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>

            <Border x:Name="button2" Grid.Column="2" Margin="10,5,10,10" BorderThickness="1"
                Height="Auto" BorderBrush="#FFC3C3C3" PreviewMouseLeftButtonDown="button2_PreviewMouseLeftButtonDown" >
                <Grid>
                    <Image Source="/Resources/delete32.png" Margin="0,4,50,4" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Height="24"/>
                    <TextBlock Text="REMOVE" Foreground="White" FontWeight="DemiBold" Margin="50,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid>
                <Border.Style>
                    <Style>
                        <Setter Property="Border.Background" Value="Transparent"/>
                        <Style.Triggers>
                            <Trigger Property="Border.IsMouseOver" Value="True">
                                <Setter Property="Border.Background" Value="#FF474747" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
        </Grid>
    </Grid>
</Window>